{"version":3,"sources":["components/nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","styled","nav","_templateObject","NavItem","span","attrs","className","_templateObject2","NavbarBrand","a","_templateObject3","ScrollLink","Link","activeClass","spy","smooth","duration","_templateObject4","NavBar","react_default","createElement","href","to","offset","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"82BAIA,IAAMA,EAAMC,IAAOC,IAAVC,KAOHC,EAAUH,IAAOI,KAAKC,MAAM,CAChCC,UAAW,YADGN,CAAHO,KAOPC,EAAcR,IAAOS,EAAEJ,MAAM,CACjCC,UAAW,gBADON,CAAHU,KAMXC,EAAaX,YAAOY,QAAMP,MAAM,CACpCQ,YAAa,SACbC,KAAK,EACLC,OAAQ,iBACRC,SAAU,KAJOhB,CAAHiB,KA2CDC,EA7BA,kBACbC,EAAAV,EAAAW,cAACrB,EAAD,CAAKO,UAAU,mDACba,EAAAV,EAAAW,cAAA,OAAKd,UAAU,2BACba,EAAAV,EAAAW,cAACZ,EAAD,CAAaa,KAAK,KAChBF,EAAAV,EAAAW,cAAA,KAAGd,UAAU,UAIfa,EAAAV,EAAAW,cAAA,OAAKd,UAAU,+BACba,EAAAV,EAAAW,cAACT,EAAD,CAAYW,GAAG,OAAOC,QAAS,KAC7BJ,EAAAV,EAAAW,cAACjB,EAAD,iBAEFgB,EAAAV,EAAAW,cAACT,EAAD,CAAYW,GAAG,QAAQC,QAAS,IAC9BJ,EAAAV,EAAAW,cAACjB,EAAD,kBAEFgB,EAAAV,EAAAW,cAACT,EAAD,CAAYW,GAAG,eAAeC,QAAS,IACrCJ,EAAAV,EAAAW,cAACjB,EAAD,wBAEFgB,EAAAV,EAAAW,cAACT,EAAD,CAAYW,GAAG,WAAWC,QAAS,IACjCJ,EAAAV,EAAAW,cAACjB,EAAD,qBAEFgB,EAAAV,EAAAW,cAACT,EAAD,CAAYW,GAAG,UAAUC,QAAS,IAChCJ,EAAAV,EAAAW,cAACjB,EAAD,uBC9CKqB,mLARX,OACEL,EAAAV,EAAAW,cAAA,OAAKd,UAAU,OACba,EAAAV,EAAAW,cAACnB,EAAD,cAJUwB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOb,EAAAV,EAAAW,cAACa,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72591643.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-scroll'\nimport styled from 'styled-components'\n\nconst Nav = styled.nav`\n  background-color: white;\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\n  padding: 0 !important;\n  transition: all 300ms;\n`\n\nconst NavItem = styled.span.attrs({\n  className: 'nav-item'\n})`\n  color: black;\n  font-size: 18px;\n`\n\nconst NavbarBrand = styled.a.attrs({\n  className: 'navbar-brand'\n})`\n  margin: 6px 16px;\n`\n\nconst ScrollLink = styled(Link).attrs({\n  activeClass: 'active',\n  spy: true,\n  smooth: 'easeInOutQuint',\n  duration: 800\n})`\n  cursor: pointer;\n  padding: 13px;\n  transition: background 200ms;\n  &:hover {\n    background-color: #f2f2f2;\n  }\n`\n\nconst NavBar = () => (\n  <Nav className='navbar navbar-light navbar-expand-lg sticky-top'>\n    <div className='container-fluid mx-lg-4'>\n      <NavbarBrand href='/'>\n        <b className='mx-2'>\n           \n        </b>\n      </NavbarBrand>\n      <div className='navbar-nav d-none d-lg-flex'>\n        <ScrollLink to='home' offset={-100}>\n          <NavItem>  Home </NavItem>\n        </ScrollLink>\n        <ScrollLink to='about' offset={-80}>\n          <NavItem>  About </NavItem>\n        </ScrollLink>\n        <ScrollLink to='achievements' offset={-90}>\n          <NavItem> Achievements </NavItem>\n        </ScrollLink>\n        <ScrollLink to='projects' offset={-90}>\n          <NavItem>  Projects </NavItem>\n        </ScrollLink>\n        <ScrollLink to='contact' offset={-90}>\n          <NavItem> Contact </NavItem>\n        </ScrollLink>\n      </div>\n    </div>\n  </Nav>\n)\n\nexport default NavBar","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './components/nav'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}